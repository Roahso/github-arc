name: Deploy GitHub Actions Runner Controller

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'charts/controller/**'
      - 'config/values.yaml'
      - '.github/workflows/deploy-controller.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'charts/controller/**'
      - 'config/values.yaml'
      - '.github/workflows/deploy-controller.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      namespace:
        description: 'Kubernetes namespace'
        required: false
        default: 'github-runner-system'
      values_file:
        description: 'Values file to use'
        required: false
        default: 'config/values.yaml'

env:
  HELM_VERSION: v3.12.0
  KUBECTL_VERSION: v1.28.0

jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Validate Helm chart
        run: |
          helm lint charts/controller/
          helm template test charts/controller/ -f config/values.yaml.example

      - name: Validate Kubernetes manifests
        run: |
          helm template test charts/controller/ -f config/values.yaml.example | kubectl apply --dry-run=client -f -

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: development
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }} --overwrite-existing

      - name: Deploy Controller
        run: |
          helm upgrade --install github-runner-controller ./charts/controller \
            -f config/values.yaml \
            --namespace github-runner-system \
            --create-namespace \
            --wait \
            --timeout 10m \
            --set controller.replicas=1

      - name: Verify deployment
        run: |
          kubectl get pods -n github-runner-system -l app.kubernetes.io/component=controller
          kubectl get runnerdeployments -n github-runner-system || echo "No runner deployments yet"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_STAGING }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP_STAGING }} --name ${{ secrets.AKS_CLUSTER_NAME_STAGING }} --overwrite-existing

      - name: Deploy Controller
        run: |
          helm upgrade --install github-runner-controller ./charts/controller \
            -f config/values.yaml \
            --namespace github-runner-system \
            --create-namespace \
            --wait \
            --timeout 10m \
            --set controller.replicas=2

      - name: Verify deployment
        run: |
          kubectl get pods -n github-runner-system -l app.kubernetes.io/component=controller
          kubectl get runnerdeployments -n github-runner-system || echo "No runner deployments yet"

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    environment: production
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP_PROD }} --name ${{ secrets.AKS_CLUSTER_NAME_PROD }} --overwrite-existing

      - name: Deploy Controller
        run: |
          helm upgrade --install github-runner-controller ./charts/controller \
            -f config/values.yaml \
            --namespace github-runner-system \
            --create-namespace \
            --wait \
            --timeout 15m \
            --set controller.replicas=3

      - name: Verify deployment
        run: |
          kubectl get pods -n github-runner-system -l app.kubernetes.io/component=controller
          kubectl get runnerdeployments -n github-runner-system || echo "No runner deployments yet"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-prod]
    if: always()
    steps:
      - name: Notify on failure
        if: failure()
        run: |
          echo "Deployment failed!"
          # Add your notification logic here (Slack, Teams, etc.) 