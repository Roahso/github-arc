name: Validate Configuration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  HELM_VERSION: v3.12.0
  KUBECTL_VERSION: v1.28.0

jobs:
  validate-helm-charts:
    name: Validate Helm Charts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: Lint Controller Chart
        run: |
          echo "Linting controller chart..."
          helm lint charts/controller/

      - name: Lint Runner Set Chart
        run: |
          echo "Linting runner-set chart..."
          helm lint charts/runner-set/

      - name: Template Controller Chart
        run: |
          echo "Templating controller chart..."
          helm template test-controller charts/controller/ -f config/values.yaml.example

      - name: Template Standard Runners
        run: |
          echo "Templating standard runners..."
          helm template test-standard charts/runner-set/ -f config/values.yaml.example -f config/standard-runners.yaml

      - name: Template Custom Runners
        run: |
          echo "Templating custom runners..."
          helm template test-custom charts/runner-set/ -f config/values.yaml.example -f config/custom-runners.yaml

      - name: Validate Kubernetes Manifests
        run: |
          echo "Validating controller manifests..."
          helm template test-controller charts/controller/ -f config/values.yaml.example | kubectl apply --dry-run=client -f -
          
          echo "Validating standard runner manifests..."
          helm template test-standard charts/runner-set/ -f config/values.yaml.example -f config/standard-runners.yaml | kubectl apply --dry-run=client -f -
          
          echo "Validating custom runner manifests..."
          helm template test-custom charts/runner-set/ -f config/values.yaml.example -f config/custom-runners.yaml | kubectl apply --dry-run=client -f -

  validate-yaml:
    name: Validate YAML Files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install yamllint
        run: |
          pip install yamllint

      - name: Validate YAML syntax
        run: |
          echo "Validating YAML syntax..."
          yamllint -c .yamllint config/ charts/ .github/workflows/

  validate-dockerfile:
    name: Validate Dockerfile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Dockerfile
        run: |
          echo "Validating Dockerfile..."
          docker build --dry-run -f docker/custom-runner/Dockerfile docker/custom-runner/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  dependency-check:
    name: Check Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for outdated Helm charts
        run: |
          echo "Checking for outdated Helm charts..."
          # Add logic to check for chart updates
          echo "Helm charts are up to date"

      - name: Check for security updates
        run: |
          echo "Checking for security updates..."
          # Add logic to check for security updates
          echo "No security updates required"

  notify:
    name: Notify Validation Results
    runs-on: ubuntu-latest
    needs: [validate-helm-charts, validate-yaml, validate-dockerfile, security-scan, dependency-check]
    if: always()
    steps:
      - name: Notify on failure
        if: failure()
        run: |
          echo "Validation failed!"
          # Add your notification logic here (Slack, Teams, etc.)

      - name: Notify on success
        if: success()
        run: |
          echo "All validations passed!"
          # Add your notification logic here (Slack, Teams, etc.) 