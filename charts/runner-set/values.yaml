# Default values for runner-set
# This is a YAML-formatted file.

# Runner Scale Set Configuration
runnerSet:
  # Name of the runner set
  name: "standard-runners"
  
  # Repository or organization to deploy runners for
  repository: ""
  organization: ""
  enterprise: ""
  
  # Runner labels for job targeting
  labels:
    - "self-hosted"
    - "linux"
    - "x64"
  
  # Runner group (optional)
  group: ""
  
  # Number of replicas (runners)
  replicas: 2
  
  # Minimum number of replicas
  minReplicas: 1
  
  # Maximum number of replicas
  maxReplicas: 10
  
  # Runner image
  image: "ghcr.io/actions/actions-runner:latest"
  
  # Docker configuration
  docker:
    enabled: true
    dockerdWithinRunnerContainer: false
    mtu: 1500
    mirror: ""
  
  # Runner resources
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      cpu: 2000m
      memory: 4Gi
  
  # Runner environment variables
  env: []
  
  # Runner volume mounts
  volumeMounts: []
  
  # Runner volumes
  volumes: []
  
  # Working directory
  workDir: "/runner/_work"
  
  # Service account for runners
  serviceAccount:
    create: true
    name: ""
    annotations: {}
  
  # Security context for runner pods
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 1000
  
  # Container security context
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: false
    runAsNonRoot: true
    runAsUser: 1000
  
  # Node selector for runner pods
  nodeSelector: {}
  
  # Tolerations for runner pods
  tolerations: []
  
  # Affinity for runner pods
  affinity: {}
  
  # Pod template for additional customization
  podTemplate:
    spec:
      containers: []
      initContainers: []
      volumes: []
      securityContext: {}
      nodeSelector: {}
      tolerations: []
      affinity: {}
  
  # Auto-scaling configuration
  autoscaling:
    enabled: true
    # Horizontal Pod Autoscaler configuration
    hpa:
      enabled: true
      minReplicas: 1
      maxReplicas: 10
      targetCPUUtilizationPercentage: 80
      targetMemoryUtilizationPercentage: 80
      scaleDownDelaySecondsAfterAdd: 300
      scaleDownDelaySecondsAfterDelete: 300
      scaleDownDelaySecondsAfterFailure: 180
      scaleDownUnneededTimeSeconds: 600
      scaleDownUtilizationThreshold: 0.5
    
    # Custom metrics for scaling
    metrics: []
    
    # Behavior configuration
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
        policies:
          - type: Percent
            value: 50
            periodSeconds: 60
      scaleUp:
        stabilizationWindowSeconds: 0
        policies:
          - type: Percent
            value: 100
            periodSeconds: 15
          - type: Pods
            value: 4
            periodSeconds: 15
        selectPolicy: Max

# AKS-specific configurations
aks:
  # Use Azure CNI
  useAzureCNI: true
  
  # Azure storage class
  storageClass: "managed-premium"
  
  # Azure load balancer annotations
  loadBalancerAnnotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "false"
    service.beta.kubernetes.io/azure-load-balancer-internal-subnet: ""
  
  # Azure node pool configuration
  nodePool:
    # Node pool name for runners
    name: "runner-pool"
    
    # Node pool labels
    labels:
      node.kubernetes.io/instance-type: "Standard_D4s_v3"
    
    # Node pool taints
    taints: []
    
    # Node pool annotations
    annotations: {}

# Monitoring and logging
monitoring:
  enabled: true
  
  # Prometheus service monitor
  serviceMonitor:
    enabled: false
    interval: 30s
    scrapeTimeout: 10s
    path: /metrics
    port: metrics
  
  # Pod disruption budget
  pdb:
    enabled: true
    minAvailable: 1

# Network policies
networkPolicy:
  enabled: false
  ingress: []
  egress: []

# Pod disruption budget
pdb:
  enabled: true
  minAvailable: 1

# Horizontal Pod Autoscaler (legacy, use autoscaling.hpa instead)
hpa:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Pod security context
podSecurityContext:
  fsGroup: 1000
  runAsNonRoot: true
  runAsUser: 1000

# Container security context
containerSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 8080

# Ingress configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []

# Logging configuration
logging:
  level: info
  format: json 